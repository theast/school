# FEEL FREE TO CHANGE THE CODE. 
# This is just a dull example

# ------------------------------------------------------------------------------   
# Start listening and handle incoming connections in board() function
# ------------------------------------------------------------------------------   
def start_board():
  ip = mycontext['ip']
  port = mycontext['port']
  print "Listening on IP " + str(ip) +" port " + str(port)
  try: 
    listencommhandle = waitforconn(ip, port, board_connection_handler)
  except Exception, e:
    print "Exception in start_board: %s, %s\n" %(type(e), e)
    raise

# ------------------------------------------------------------------------------    
# Called when an incoming message is received. 
# --> Important starting point
# ------------------------------------------------------------------------------    
def board_connection_handler(ip, port, sockobj, thiscommhandle, listencommhandle):
  try:
    msgheader = sockobj.recv(1024) # Receive message
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
      get_board_handler(msgheader, sockobj, thiscommhandle)
    else:
      other_requests_handler(msgheader, sockobj, thiscommhandle)

  except Exception, e:
    print "Exception in board: %s, %s\n" %(type(e), e)
    htmlresponse = mycontext['status_template'] % ('red', "404 Not Found\n")
    res=make_http_response(404, 'Not Found', htmlresponse)
    sockobj.send(res)
    stopcomm(thiscommhandle) 

# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def get_board_handler(msgheader, sockobj, thiscommhandle):
  htmlresponse = generate_html_page()
  res=make_http_response(200, 'OK', htmlresponse)
  try:
    sockobj.send(res)
    stopcomm(thiscommhandle) 
  except Exception, e:
    print "Could not get board: %s, %s\n" %(type(e), e)
# ------------------------------------------------------------------------------
# Handles initial GET request from browser, outputs HTML string and closes socket.
# ------------------------------------------------------------------------------
def other_requests_handler(msgheader, sockobj, thiscommhandle):
  # extract the query from the HTTP request  
  query = extract_http_request_contents(msgheader)
  # extract the query parameters
  parameters = extract_parameters_from_query(query)

  if msgheader.startswith('POST'):
    if 'delete' in parameters:
      # Extract id of entry from message header
      postId = msgheader.split('/entries/')[1].split(' ')[0]
      if parameters['delete'] == '0':
        modify_entry(postId, parameters['entry'])
      elif parameters['delete'] == '1':
        delete_entry(postId)
    else:
      add_entry(parameters['entry'])
  
  # Confirmation message 
  htmlresponse = mycontext['status_template'] % ('green', "200 OK\n" + msgheader)
  res=make_http_response(200, 'OK', htmlresponse)
  sockobj.send(res)
  stopcomm(thiscommhandle) 

  send_blackboard(msgheader)

# ------------------------------------------------------------------------------
# Wrap into HTTP headers
# ------------------------------------------------------------------------------
def make_http_response(status, status_text, htmlresponse):
    response_template = "HTTP/1.1 %d %s\r\nContent-type: text/html\r\nContent-length: %i\r\n\r\n%s"
    return response_template % (status, status_text, len(htmlresponse), htmlresponse)

# ------------------------------------------------------------------------------
# Utility function to extract the contents (payload) from HTTP request
# ------------------------------------------------------------------------------
def extract_http_request_contents(header):
  # find content length
  content_length = header.split('Content-Length: ')[1]
  content_length = int(content_length.split('\r\n')[0])
  
  # extract the http response body and discard the header
  contents = header[-content_length:]
  return contents

# ------------------------------------------------------------------------------
# Utility function to extract query parameter from HTML query
# ------------------------------------------------------------------------------
def extract_parameters_from_query(msg):
  # extract the query parameters as a dictionary: {name:value}
  # example input format: comment=aa&ip=127.0.0.1&port=63101&action=Delete
  parameters={}
  arr = msg.split('&')
  for a in arr:
    pp = a.split('=')
    if len(pp)>1:
      parameters[pp[0]] = pp[1]
  return parameters

# ------------------------------------------------------------------------------
# Adds new entry to blackboard 
# Argument: Value of the new entry.
# ------------------------------------------------------------------------------
def add_entry(entry):
  mycontext['msgid'] += 1
  mycontext['entries'][mycontext['msgid']] = entry

# ------------------------------------------------------------------------------
# Modifies given entry from blackboard 
# Arguments: Message id of the modified entry and the value of the new entry.
# ------------------------------------------------------------------------------
def modify_entry(msgid, newEntry):
  try:
    mycontext['entries'][int(msgid)] = newEntry
  except Exception, e:
    print "Modify error: index %d does not exist." %int(msgid)

# ------------------------------------------------------------------------------
# Deletes given entry from blackboard 
# Argument: Message id of entry that is deleted.
# ------------------------------------------------------------------------------
def delete_entry(msgid):
  try:
    del mycontext['entries'][int(msgid)]
  except Exception, e:
    print "Deletion error: index %d does not exist." %int(msgid)
    
# ------------------------------------------------------------------------------
# Sends incoming message header to all connected vessels
# Argument: Message header from incoming message
# ------------------------------------------------------------------------------
def send_blackboard(msgheader):
  # Extract host ip from message header
  hostip = msgheader.split('Host: ')[1].split('\n')[0].split(':')[0]

  for vessel in mycontext['vessels']:
    ip = vessel.split(':')[0]
    port = vessel.split(':')[1]
    try: 
      # Send to all vessels except yourself and only if the incoming message 
      # has host ip of yourself
      if ip != mycontext['ip'] and hostip == mycontext['ip']:
        listencommhandle = openconn(ip, int(port))
        listencommhandle.send(msgheader)
        listencommhandle.close()  
    except Exception, e:
      print "Exception in send_blackboard: %s, %s\n" %(type(e), e)

# ------------------------------------------------------------------------------
# Outputs the blackboard html 
# ------------------------------------------------------------------------------   
def generate_html_page():
  #Initialize blackboard content
  entriesDict = mycontext['entries']
  entries = ""

  # adds together the html of all entrys 
  for msgid, msg in entriesDict.iteritems():
    entry = mycontext['entry_template'] %('entries/%d' % (msgid), msgid, msg)
    entries = "".join([entries, entry])

  # dynamic title showing Ip address, port and up time. 
  title='Cool board @ %s:%d. Up time: %d' %( str(mycontext['ip']), mycontext['port'], int(getruntime()) )
  content = mycontext['boardcontents_template'] %( title, entries )
  fullpage_h = mycontext['frontpage_header_template'] + content
  fullpage = fullpage_h + mycontext['frontpage_footer_template'] % mycontext['authors']
  return fullpage
  
# ------------------------------------------------------------------------------    
# Main entry point of the program. Initalizes global variables in mycontext
# and calls start_board() which opens a socket for incoming connections.
# ------------------------------------------------------------------------------
if callfunc == 'initialize':
  # whenever this vessel gets a connection on its IP:port it'll call function board_connection_handler
  if len(callargs) == 1 or len(callargs) == 2:
    port = int(callargs[0])
    if len(callargs) == 2:
      ip=str(callargs[1])
    else:
      try:
        ip = getmyip()
      except Exception, e:
        print "Could not get an IP\n"
        print (type(e), e)
        raise
  
  # Fail if we don't have 1 or 2 arguments  
  else:
    raise Exception("Usage: python <path to repy.py> <path to restrictions.default> skeleton2016.repy <port> [ip (optional)]")

  #Initialize Port and IP
  mycontext['port'] = port
  mycontext['ip'] = ip
  
  #read html template files
  mycontext['entry_template'] = file("entry_template.html").read()
  mycontext['boardcontents_template'] = file("boardcontents_template.html").read()
  mycontext['frontpage_header_template'] = file("board_frontpage_header_template.html").read()
  mycontext['frontpage_footer_template'] = file("board_frontpage_footer_template.html").read()
  mycontext['status_template'] = file("status_template.html").read()

  mycontext['authors'] = "Adrian Gashi & Theodor Aastrand"
  mycontext['msgid'] = 0
  mycontext['entries'] = {}

  # Initialize array of all connected vessels, read from neighborlist.txt
  try:
    vesselsFile = open('vessels.txt', 'r')
    mycontext['vessels'] = []
    for vessel in vesselsFile.readlines():
      mycontext['vessels'].append(vessel.strip())
  except Exception, e:
    print "Exception in file: %s, %s\n" %(type(e), e)

  start_board()