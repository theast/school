-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCpp where
import AbsCpp
import LexCpp
import ErrM

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pType Type
%name pListType ListType
%name pListCIdent ListCIdent
%name pStructDecl StructDecl
%name pListStructDecl ListStructDecl
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pListStm ListStm
%name pExp16 Exp16
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp10 Exp10
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pListExp ListExp
%name pLiteral Literal
%name pQConstPart QConstPart
%name pListString ListString
%name pListQConstPart ListQConstPart
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&' { PT _ (TS _ 4) }
  '&&' { PT _ (TS _ 5) }
  '(' { PT _ (TS _ 6) }
  ')' { PT _ (TS _ 7) }
  '*' { PT _ (TS _ 8) }
  '+' { PT _ (TS _ 9) }
  '++' { PT _ (TS _ 10) }
  '+=' { PT _ (TS _ 11) }
  ',' { PT _ (TS _ 12) }
  '-' { PT _ (TS _ 13) }
  '--' { PT _ (TS _ 14) }
  '-=' { PT _ (TS _ 15) }
  '->' { PT _ (TS _ 16) }
  '.' { PT _ (TS _ 17) }
  '/' { PT _ (TS _ 18) }
  ':' { PT _ (TS _ 19) }
  '::' { PT _ (TS _ 20) }
  ';' { PT _ (TS _ 21) }
  '<' { PT _ (TS _ 22) }
  '<<' { PT _ (TS _ 23) }
  '<=' { PT _ (TS _ 24) }
  '=' { PT _ (TS _ 25) }
  '==' { PT _ (TS _ 26) }
  '>' { PT _ (TS _ 27) }
  '>=' { PT _ (TS _ 28) }
  '>>' { PT _ (TS _ 29) }
  '?' { PT _ (TS _ 30) }
  '[' { PT _ (TS _ 31) }
  ']' { PT _ (TS _ 32) }
  'bool' { PT _ (TS _ 33) }
  'const' { PT _ (TS _ 34) }
  'do' { PT _ (TS _ 35) }
  'double' { PT _ (TS _ 36) }
  'else' { PT _ (TS _ 37) }
  'for' { PT _ (TS _ 38) }
  'if' { PT _ (TS _ 39) }
  'inline' { PT _ (TS _ 40) }
  'int' { PT _ (TS _ 41) }
  'return' { PT _ (TS _ 42) }
  'struct' { PT _ (TS _ 43) }
  'throw' { PT _ (TS _ 44) }
  'typedef' { PT _ (TS _ 45) }
  'using' { PT _ (TS _ 46) }
  'void' { PT _ (TS _ 47) }
  'while' { PT _ (TS _ 48) }
  '{' { PT _ (TS _ 49) }
  '||' { PT _ (TS _ 50) }
  '}' { PT _ (TS _ 51) }

L_integ  { PT _ (TI $$) }
L_charac { PT _ (TC $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_CIdent { PT _ (T_CIdent $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Char    :: { Char }    : L_charac { (read ( $1)) :: Char }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }
CIdent    :: { CIdent} : L_CIdent { CIdent ($1)}

Program :: { Program }
Program : ListDef { AbsCpp.PDefs (reverse $1) }
Def :: { Def }
Def : 'inline' Type CIdent '(' ListArg ')' '{' ListStm '}' { AbsCpp.DInline $2 $3 $5 (reverse $8) }
    | Type CIdent '(' ListArg ')' '{' ListStm '}' { AbsCpp.DFun $1 $2 $4 (reverse $7) }
    | 'using' ListQConstPart ';' { AbsCpp.DUsing $2 }
    | 'typedef' Type CIdent ';' { AbsCpp.DTypedef $2 $3 }
    | Type CIdent '(' ListArg ')' ';' { AbsCpp.DFunInit $1 $2 $4 }
    | 'inline' Type CIdent '(' ListArg ')' ';' { AbsCpp.DFunInlin $2 $3 $5 }
    | 'struct' CIdent '{' ListStructDecl '}' ';' { AbsCpp.DStruct $2 (reverse $4) }
    | Type '&' CIdent '=' CIdent ';' { AbsCpp.DPoint $1 $3 $5 }
    | Type ListCIdent ';' { AbsCpp.DDecl $1 $2 }
    | Type CIdent '=' Exp ';' { AbsCpp.DAssign $1 $2 $4 }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Type :: { Type }
Type : 'bool' { AbsCpp.Type_bool }
     | 'int' { AbsCpp.Type_int }
     | 'double' { AbsCpp.Type_double }
     | 'void' { AbsCpp.Type_void }
     | ListQConstPart { AbsCpp.Type1 $1 }
     | Type '&' { AbsCpp.Type2 $1 }
ListType :: { [Type] }
ListType : Type { (:[]) $1 } | Type ',' ListType { (:) $1 $3 }
ListCIdent :: { [CIdent] }
ListCIdent : CIdent { (:[]) $1 }
           | CIdent ',' ListCIdent { (:) $1 $3 }
StructDecl :: { StructDecl }
StructDecl : Type CIdent { AbsCpp.AStructType $1 $2 }
ListStructDecl :: { [StructDecl] }
ListStructDecl : {- empty -} { [] }
               | ListStructDecl StructDecl ';' { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type { AbsCpp.AInitType $1 }
    | Type CIdent { AbsCpp.ADeclRef $1 $2 }
    | Type CIdent '=' Exp { AbsCpp.AAssign $1 $2 $4 }
    | 'const' Type { AbsCpp.AConstInitRef $2 }
    | 'const' Type CIdent { AbsCpp.AConstDeclRef $2 $3 }
    | 'const' Type CIdent '=' Exp { AbsCpp.AConstsAssign $2 $3 $5 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Stm :: { Stm }
Stm : 'struct' CIdent '{' ListStructDecl '}' ';' { AbsCpp.SStruct $2 (reverse $4) }
    | Exp ';' { AbsCpp.SExp $1 }
    | 'return' Exp ';' { AbsCpp.SReturn $2 }
    | Type ListCIdent ';' { AbsCpp.SDecls $1 $2 }
    | 'while' '(' Exp ')' Stm { AbsCpp.SWhile $3 $5 }
    | '{' ListStm '}' { AbsCpp.SBlock (reverse $2) }
    | 'if' '(' Exp ')' Stm { AbsCpp.SIf $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { AbsCpp.SIfElse $3 $5 $7 }
    | 'typedef' ListQConstPart CIdent ';' { AbsCpp.STypedef $2 $3 }
    | 'for' '(' Arg ';' Exp ';' Exp ')' Stm { AbsCpp.SFor $3 $5 $7 $9 }
    | 'const' Arg ';' { AbsCpp.SConst $2 }
    | Type CIdent '=' Exp ';' { AbsCpp.SInit $1 $2 $4 }
    | 'do' Stm 'while' '(' Exp ')' ';' { AbsCpp.SDoWhile $2 $5 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp16 :: { Exp }
Exp16 : ListQConstPart { AbsCpp.QConst $1 }
      | Literal { AbsCpp.LiteralE $1 }
      | '(' Exp ')' { $2 }
Exp15 :: { Exp }
Exp15 : Exp15 '[' Exp11 ']' { AbsCpp.Index $1 $3 }
      | CIdent '(' ListExp ')' { AbsCpp.Call $1 $3 }
      | Exp16 { $1 }
Exp14 :: { Exp }
Exp14 : Exp14 '->' Exp15 { AbsCpp.StructPr2 $1 $3 }
      | Exp14 '.' Exp15 { AbsCpp.StructPr $1 $3 }
      | Exp15 '--' { AbsCpp.ADecr $1 }
      | Exp15 '++' { AbsCpp.AIncr $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '!' Exp14 { AbsCpp.Neg $2 }
      | '*' Exp14 { AbsCpp.Deref $2 }
      | '--' Exp14 { AbsCpp.BDecr $2 }
      | '++' Exp14 { AbsCpp.BIncr $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '%' Exp13 { AbsCpp.Modi $1 $3 }
      | Exp12 '/' Exp13 { AbsCpp.Divi $1 $3 }
      | Exp12 '*' Exp13 { AbsCpp.Multi $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '-' Exp12 { AbsCpp.Subb $1 $3 }
      | Exp11 '+' Exp12 { AbsCpp.Addi $1 $3 }
      | Exp12 { $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsCpp.LShiftE $1 $3 }
      | Exp10 '>>' Exp11 { AbsCpp.RShiftE $1 $3 }
      | Exp11 { $1 }
Exp9 :: { Exp }
Exp9 : Exp9 '<' Exp10 { AbsCpp.Lt $1 $3 }
     | Exp9 '>' Exp10 { AbsCpp.Gt $1 $3 }
     | Exp9 '<=' Exp10 { AbsCpp.LtEq $1 $3 }
     | Exp9 '>=' Exp10 { AbsCpp.GtEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp8 '==' Exp9 { AbsCpp.Eq $1 $3 }
     | Exp8 '!=' Exp9 { AbsCpp.NEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsCpp.And $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsCpp.Or $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsCpp.Ass $1 $3 }
     | Exp3 '+=' Exp2 { AbsCpp.AssInc $1 $3 }
     | Exp3 '-=' Exp2 { AbsCpp.AssDecr $1 $3 }
     | Exp3 '?' Exp2 ':' Exp2 { AbsCpp.Condi $1 $3 $5 }
     | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : 'throw' Exp2 { AbsCpp.Throw $2 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Literal :: { Literal }
Literal : ListString { AbsCpp.StringL $1 }
        | Integer { AbsCpp.IntL $1 }
        | Char { AbsCpp.CharL $1 }
        | Double { AbsCpp.DoubleL $1 }
QConstPart :: { QConstPart }
QConstPart : CIdent { AbsCpp.NameQC $1 }
           | CIdent '<' ListType '>' { AbsCpp.QC2 $1 $3 }
ListString :: { [String] }
ListString : String { (:[]) $1 } | String ListString { (:) $1 $2 }
ListQConstPart :: { [QConstPart] }
ListQConstPart : QConstPart { (:[]) $1 }
               | QConstPart '::' ListQConstPart { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

