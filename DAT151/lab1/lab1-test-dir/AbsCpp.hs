

module AbsCpp where

-- Haskell module generated by the BNF converter




newtype CIdent = CIdent String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DInline Type CIdent [Arg] [Stm]
    | DFun Type CIdent [Arg] [Stm]
    | DUsing [QConstPart]
    | DTypedef Type CIdent
    | DFunInit Type CIdent [Arg]
    | DFunInlin Type CIdent [Arg]
    | DStruct CIdent [StructDecl]
    | DPoint Type CIdent CIdent
    | DDecl Type [CIdent]
    | DAssign Type CIdent Exp
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_bool
    | Type_int
    | Type_double
    | Type_void
    | Type1 [QConstPart]
    | Type2 Type
  deriving (Eq, Ord, Show, Read)

data StructDecl = AStructType Type CIdent
  deriving (Eq, Ord, Show, Read)

data Arg
    = AInitType Type
    | ADeclRef Type CIdent
    | AAssign Type CIdent Exp
    | AConstInitRef Type
    | AConstDeclRef Type CIdent
    | AConstsAssign Type CIdent Exp
  deriving (Eq, Ord, Show, Read)

data Stm
    = SStruct CIdent [StructDecl]
    | SExp Exp
    | SReturn Exp
    | SDecls Type [CIdent]
    | SWhile Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | STypedef [QConstPart] CIdent
    | SFor Arg Exp Exp Stm
    | SConst Arg
    | SInit Type CIdent Exp
    | SDoWhile Stm Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = QConst [QConstPart]
    | LiteralE Literal
    | Index Exp Exp
    | Call CIdent [Exp]
    | StructPr2 Exp Exp
    | StructPr Exp Exp
    | ADecr Exp
    | AIncr Exp
    | Neg Exp
    | Deref Exp
    | BDecr Exp
    | BIncr Exp
    | Modi Exp Exp
    | Divi Exp Exp
    | Multi Exp Exp
    | Subb Exp Exp
    | Addi Exp Exp
    | LShiftE Exp Exp
    | RShiftE Exp Exp
    | Lt Exp Exp
    | Gt Exp Exp
    | LtEq Exp Exp
    | GtEq Exp Exp
    | Eq Exp Exp
    | NEq Exp Exp
    | And Exp Exp
    | Or Exp Exp
    | Ass Exp Exp
    | AssInc Exp Exp
    | AssDecr Exp Exp
    | Condi Exp Exp Exp
    | Throw Exp
  deriving (Eq, Ord, Show, Read)

data Literal
    = StringL [String] | IntL Integer | CharL Char | DoubleL Double
  deriving (Eq, Ord, Show, Read)

data QConstPart = NameQC CIdent | QC2 CIdent [Type]
  deriving (Eq, Ord, Show, Read)

