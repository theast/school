module SkelCpp where

-- Haskell module generated by the BNF converter

import AbsCpp
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transCIdent :: CIdent -> Result
transCIdent x = case x of
  CIdent string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DInline type_ cident args stms -> failure x
  DFun type_ cident args stms -> failure x
  DUsing qconstparts -> failure x
  DTypedef type_ cident -> failure x
  DFunInit type_ cident args -> failure x
  DFunInlin type_ cident args -> failure x
  DStruct cident structdecls -> failure x
  DPoint type_ cident1 cident2 -> failure x
  DDecl type_ cidents -> failure x
  DAssign type_ cident exp -> failure x
transType :: Type -> Result
transType x = case x of
  Type_bool -> failure x
  Type_int -> failure x
  Type_double -> failure x
  Type_void -> failure x
  Type1 qconstparts -> failure x
  Type2 type_ -> failure x
transStructDecl :: StructDecl -> Result
transStructDecl x = case x of
  AStructType type_ cident -> failure x
transArg :: Arg -> Result
transArg x = case x of
  AInitType type_ -> failure x
  ADeclRef type_ cident -> failure x
  AAssign type_ cident exp -> failure x
  AConstInitRef type_ -> failure x
  AConstDeclRef type_ cident -> failure x
  AConstsAssign type_ cident exp -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SStruct cident structdecls -> failure x
  SExp exp -> failure x
  SReturn exp -> failure x
  SDecls type_ cidents -> failure x
  SWhile exp stm -> failure x
  SBlock stms -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
  STypedef qconstparts cident -> failure x
  SFor arg exp1 exp2 stm -> failure x
  SConst arg -> failure x
  SInit type_ cident exp -> failure x
  SDoWhile stm exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  QConst qconstparts -> failure x
  LiteralE literal -> failure x
  Index exp1 exp2 -> failure x
  Call cident exps -> failure x
  StructPr2 exp1 exp2 -> failure x
  StructPr exp1 exp2 -> failure x
  ADecr exp -> failure x
  AIncr exp -> failure x
  Neg exp -> failure x
  Deref exp -> failure x
  BDecr exp -> failure x
  BIncr exp -> failure x
  Modi exp1 exp2 -> failure x
  Divi exp1 exp2 -> failure x
  Multi exp1 exp2 -> failure x
  Subb exp1 exp2 -> failure x
  Addi exp1 exp2 -> failure x
  LShiftE exp1 exp2 -> failure x
  RShiftE exp1 exp2 -> failure x
  Lt exp1 exp2 -> failure x
  Gt exp1 exp2 -> failure x
  LtEq exp1 exp2 -> failure x
  GtEq exp1 exp2 -> failure x
  Eq exp1 exp2 -> failure x
  NEq exp1 exp2 -> failure x
  And exp1 exp2 -> failure x
  Or exp1 exp2 -> failure x
  Ass exp1 exp2 -> failure x
  AssInc exp1 exp2 -> failure x
  AssDecr exp1 exp2 -> failure x
  Condi exp1 exp2 exp3 -> failure x
  Throw exp -> failure x
transLiteral :: Literal -> Result
transLiteral x = case x of
  StringL strings -> failure x
  IntL integer -> failure x
  CharL char -> failure x
  DoubleL double -> failure x
transQConstPart :: QConstPart -> Result
transQConstPart x = case x of
  NameQC cident -> failure x
  QC2 cident types -> failure x

